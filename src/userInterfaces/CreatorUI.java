package userInterfaces;

import java.awt.event.ActionEvent;

import javax.swing.event.ListSelectionListener;

import characterTraits.AbilityScore;
import characterTraits.CharacterClass;
import characterTraits.Race;
import main.CharacterCreator;
import utils.AbilityScoreGenerator;
import utils.Classes;
import utils.Races;
import utils.Warning;

public class CreatorUI extends java.awt.Frame implements CSmithUI {



	// Variables declaration - do not modify                     
	private javax.swing.JLabel abilityScoreLbl;
	private javax.swing.JPanel abilityScorePane;
	private javax.swing.JLabel chaLbl;
	private javax.swing.JTextField chaMod;
	private javax.swing.JTextField chaScoreIn;
	private javax.swing.JPanel characterMakerPane;
	private javax.swing.JLabel chooseClassLbl;
	private javax.swing.JLabel chooseRaceLbl;
	private javax.swing.JScrollPane classChooserPane;
	private javax.swing.JList<String> classList;
	private javax.swing.JLabel conLbl;
	private javax.swing.JTextField conMod;
	private javax.swing.JTextField conScoreIn;
	private javax.swing.JPanel controls;
	private javax.swing.JLabel dexLbl;
	private javax.swing.JTextField dexMod;
	private javax.swing.JTextField dexScoreIn;
	private javax.swing.JTextArea displayInputScores;
	private javax.swing.JButton doneBtn;
	private javax.swing.JButton exitBtn;
	private javax.swing.JLabel intLbl;
	private javax.swing.JTextField intMod;
	private javax.swing.JTextField intScoreIn;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JList<String> raceList;
	private javax.swing.JLabel strLbl;
	private javax.swing.JTextField strMod;
	private javax.swing.JTextField strScoreIn;
	private javax.swing.JLabel wisLbl;
	private javax.swing.JTextField wisMod;
	private javax.swing.JTextField wisScoreIn;
	// End of variables declaration                   



	@SuppressWarnings("serial")
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">   
	@Override
	public void init() {

		controls = new javax.swing.JPanel();
		exitBtn = new javax.swing.JButton();
		doneBtn = new javax.swing.JButton();
		characterMakerPane = new javax.swing.JPanel();
		chooseClassLbl = new javax.swing.JLabel();
		classChooserPane = new javax.swing.JScrollPane();
		classList = new javax.swing.JList<>();
		chooseRaceLbl = new javax.swing.JLabel();
		jScrollPane1 = new javax.swing.JScrollPane();
		raceList = new javax.swing.JList<>();
		abilityScorePane = new javax.swing.JPanel();
		strLbl = new javax.swing.JLabel();
		dexLbl = new javax.swing.JLabel();
		conLbl = new javax.swing.JLabel();
		intLbl = new javax.swing.JLabel();
		wisLbl = new javax.swing.JLabel();
		chaLbl = new javax.swing.JLabel();
		jScrollPane2 = new javax.swing.JScrollPane();
		displayInputScores = new javax.swing.JTextArea();
		strScoreIn = new javax.swing.JTextField();
		dexScoreIn = new javax.swing.JTextField();
		conScoreIn = new javax.swing.JTextField();
		intScoreIn = new javax.swing.JTextField();
		wisScoreIn = new javax.swing.JTextField();
		chaScoreIn = new javax.swing.JTextField();
		strMod = new javax.swing.JTextField();
		dexMod = new javax.swing.JTextField();
		conMod = new javax.swing.JTextField();
		intMod = new javax.swing.JTextField();
		wisMod = new javax.swing.JTextField();
		chaMod = new javax.swing.JTextField();
		abilityScoreLbl = new javax.swing.JLabel();

		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent evt) {
				exitForm(evt);
			}
		});

		exitBtn.setText("Exit");
		exitBtn.addActionListener(this);
		controls.add(exitBtn);

		doneBtn.setText("Done");
		doneBtn.addActionListener(this);
		controls.add(doneBtn);

		chooseClassLbl.setText("Choose Class:");

		classChooserPane.setPreferredSize(new java.awt.Dimension(48, 80));
		
		classList.setModel(new javax.swing.AbstractListModel<String>() {
			public int getSize() { return Classes.classList.length; }
			public String getElementAt(int i) { return Classes.classList[i].getName(); }
		});
		classList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		classChooserPane.setViewportView(classList);

		chooseRaceLbl.setText("Choose Race:");

		raceList.setModel(new javax.swing.AbstractListModel<String>() {
			public int getSize() { return Races.raceList.length; }
			public String getElementAt(int i) { return Races.raceList[i].getName(); }
		});
		jScrollPane1.setViewportView(raceList);

		strLbl.setText("Strength");

		dexLbl.setText("Dexterity");

		conLbl.setText("Constitution");

		intLbl.setText("Intelegence");

		wisLbl.setText("Wisdom");

		chaLbl.setText("Charisma");

		displayInputScores.setColumns(20);
		displayInputScores.setRows(5);
		displayInputScores.setEditable(false);
		
		int scores[] = AbilityScoreGenerator.rollScores();
		
		displayInputScores.setText(
				Integer.toString(scores[0]) + "\n" +
				Integer.toString(scores[1]) + "\n" +
				Integer.toString(scores[2]) + "\n" +
				Integer.toString(scores[3]) + "\n" +
				Integer.toString(scores[4]) + "\n" +
				Integer.toString(scores[5]) 
				);
		
		jScrollPane2.setViewportView(displayInputScores);

		strScoreIn.setText("");
		strScoreIn.addActionListener(this);

		dexScoreIn.setText("");
		dexScoreIn.addActionListener(this);

		conScoreIn.setText("");
		conScoreIn.addActionListener(this);

		intScoreIn.setText("");
		intScoreIn.addActionListener(this);

		wisScoreIn.setText("");
		wisScoreIn.addActionListener(this);

		chaScoreIn.setText("");
		chaScoreIn.addActionListener(this);

		strMod.setText("+0");
		strMod.setEditable(false);

		dexMod.setText("+0");
		dexMod.setEditable(false);

		conMod.setText("+0");
		conMod.setEditable(false);

		intMod.setText("+0");
		intMod.setEditable(false);

		wisMod.setText("+0");
		wisMod.setEditable(false);

		chaMod.setText("+0");
		chaMod.setEditable(false);

		abilityScoreLbl.setText("Ability Scores:");

		javax.swing.GroupLayout abilityScorePaneLayout = new javax.swing.GroupLayout(abilityScorePane);
		abilityScorePane.setLayout(abilityScorePaneLayout);
		abilityScorePaneLayout.setHorizontalGroup(
				abilityScorePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(abilityScorePaneLayout.createSequentialGroup()
						.addContainerGap()
						.addGroup(abilityScorePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
								.addGroup(abilityScorePaneLayout.createSequentialGroup()
										.addComponent(chaLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(chaScoreIn, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGap(18, 18, 18)
										.addComponent(chaMod, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGroup(abilityScorePaneLayout.createSequentialGroup()
										.addComponent(dexLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(dexScoreIn, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGap(18, 18, 18)
										.addComponent(dexMod))
								.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, abilityScorePaneLayout.createSequentialGroup()
										.addComponent(conLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(conScoreIn, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGap(18, 18, 18)
										.addComponent(conMod, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGroup(abilityScorePaneLayout.createSequentialGroup()
										.addComponent(intLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(intScoreIn, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGap(18, 18, 18)
										.addComponent(intMod, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGroup(abilityScorePaneLayout.createSequentialGroup()
										.addComponent(wisLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(wisScoreIn, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGap(18, 18, 18)
										.addComponent(wisMod, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGroup(abilityScorePaneLayout.createSequentialGroup()
										.addComponent(strLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(strScoreIn, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGap(18, 18, 18)
										.addGroup(abilityScorePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(abilityScoreLbl)
												.addComponent(strMod))))
						.addGap(18, 18, 18)
						.addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
				);
		abilityScorePaneLayout.setVerticalGroup(
				abilityScorePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(abilityScorePaneLayout.createSequentialGroup()
						.addContainerGap()
						.addComponent(abilityScoreLbl)
						.addGap(25, 25, 25)
						.addGroup(abilityScorePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(abilityScorePaneLayout.createSequentialGroup()
										.addGroup(abilityScorePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(strLbl)
												.addComponent(strScoreIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(strMod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGap(18, 18, 18)
										.addGroup(abilityScorePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(dexLbl)
												.addComponent(dexScoreIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(dexMod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGap(18, 18, 18)
										.addGroup(abilityScorePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(conLbl)
												.addComponent(conScoreIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(conMod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGap(18, 18, 18)
										.addGroup(abilityScorePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(intLbl)
												.addComponent(intScoreIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(intMod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGap(14, 14, 14)
										.addGroup(abilityScorePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(wisLbl)
												.addComponent(wisScoreIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(wisMod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGap(18, 18, 18)
										.addGroup(abilityScorePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(chaLbl)
												.addComponent(chaScoreIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(chaMod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGap(0, 13, Short.MAX_VALUE))
								.addComponent(jScrollPane2))
						.addContainerGap())
				);

		javax.swing.GroupLayout characterMakerPaneLayout = new javax.swing.GroupLayout(characterMakerPane);
		characterMakerPane.setLayout(characterMakerPaneLayout);
		characterMakerPaneLayout.setHorizontalGroup(
				characterMakerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(characterMakerPaneLayout.createSequentialGroup()
						.addGroup(characterMakerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(chooseClassLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(classChooserPane, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGroup(characterMakerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(characterMakerPaneLayout.createSequentialGroup()
										.addGap(18, 18, 18)
										.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGroup(characterMakerPaneLayout.createSequentialGroup()
										.addGap(10, 10, 10)
										.addComponent(chooseRaceLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(abilityScorePane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
				);
		characterMakerPaneLayout.setVerticalGroup(
				characterMakerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(characterMakerPaneLayout.createSequentialGroup()
						.addContainerGap()
						.addGroup(characterMakerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(chooseClassLbl)
								.addComponent(chooseRaceLbl))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(characterMakerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(classChooserPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(jScrollPane1)))
				.addGroup(characterMakerPaneLayout.createSequentialGroup()
						.addComponent(abilityScorePane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(0, 6, Short.MAX_VALUE))
				);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(controls, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addComponent(characterMakerPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
						.addComponent(characterMakerPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(controls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap())
				);

		pack();
		this.setVisible(true);
	}// </editor-fold>                        

	/**
	 * Exit the Application
	 */
	private void exitForm(java.awt.event.WindowEvent evt) {                          
		System.exit(0);
	}                         


	@Override
	public void actionPerformed(ActionEvent e) {

		if(e.getSource() == exitBtn) {
			HomeUI goHome = new HomeUI();
			goHome.init();
			this.dispose();
		}
		else if(e.getSource() == strScoreIn) {
			CharacterCreator.abilityScores[0] = new AbilityScore("Strength", Integer.parseInt(strScoreIn.getText() ) );
			if(CharacterCreator.abilityScores[0].getModifier() > 0) {
				strMod.setText("+" + Integer.toString(CharacterCreator.abilityScores[0].getModifier()));
			}
			else strMod.setText(Integer.toString(CharacterCreator.abilityScores[0].getModifier())); 
		}
		else if(e.getSource() == dexScoreIn) {
			CharacterCreator.abilityScores[1] = new AbilityScore("Dexterity", Integer.parseInt(dexScoreIn.getText() ) );
			if(CharacterCreator.abilityScores[1].getModifier() > 0) {
				dexMod.setText("+" + Integer.toString(CharacterCreator.abilityScores[1].getModifier()));
			}
			else dexMod.setText(Integer.toString(CharacterCreator.abilityScores[1].getModifier()));
		}
		else if(e.getSource() == conScoreIn) {
			CharacterCreator.abilityScores[2] = new AbilityScore("Constitution", Integer.parseInt(conScoreIn.getText() ) );
			if(CharacterCreator.abilityScores[2].getModifier() > 0) {
				conMod.setText("+" + Integer.toString(CharacterCreator.abilityScores[2].getModifier()));
			}
			else conMod.setText(Integer.toString(CharacterCreator.abilityScores[2].getModifier()));
		}
		else if(e.getSource() == intScoreIn) {
			CharacterCreator.abilityScores[3] = new AbilityScore("Intellegence", Integer.parseInt(intScoreIn.getText() ) );
			if(CharacterCreator.abilityScores[3].getModifier() > 0) {
				intMod.setText("+" + Integer.toString(CharacterCreator.abilityScores[3].getModifier()));
			}
			else intMod.setText(Integer.toString(CharacterCreator.abilityScores[3].getModifier()));
		}
		else if(e.getSource() == wisScoreIn) {
			CharacterCreator.abilityScores[4] = new AbilityScore("Wisdom", Integer.parseInt(wisScoreIn.getText() ) );
			if(CharacterCreator.abilityScores[4].getModifier() > 0) {
				wisMod.setText("+" + Integer.toString(CharacterCreator.abilityScores[4].getModifier()));
			}
			else wisMod.setText(Integer.toString(CharacterCreator.abilityScores[4].getModifier()));
		}
		else if(e.getSource() == chaScoreIn) {
			CharacterCreator.abilityScores[5] = new AbilityScore("Charisma", Integer.parseInt(chaScoreIn.getText() ) );
			if(CharacterCreator.abilityScores[5].getModifier() > 0) {
				chaMod.setText("+" + Integer.toString(CharacterCreator.abilityScores[5].getModifier()));
			}
			else chaMod.setText(Integer.toString(CharacterCreator.abilityScores[5].getModifier()));
		}

		else if(e.getSource() == doneBtn) {

			
			if(classList.getSelectedValue() == null) {
				Warning.warn("Class Not Selected");
			}
			else if(raceList.getSelectedValue() == null) {
				Warning.warn("Race Not Selected");
			}
			
			CharacterCreator.characterClass = Classes.classList[classList.getSelectedIndex()];
			CharacterCreator.race = Races.raceList[raceList.getSelectedIndex()];
			
			
			ExportUI expo = new ExportUI();
			expo.init();
			

		}

	}
}

